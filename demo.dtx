% \iffalse meta-comment
%
% Copyright (c) 2016 by Andreas Fieger <fiedsch@ja-eh.at>
%
% License: MIT
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{demo.dtx}
\documentclass{ltxdoc}
\usepackage[german]{babel}
\usepackage{parskip}
\usepackage{ifxetex}
\ifxetex
  \usepackage{fontspec}
  %%% \setmainfont{Linux Libertine O}
  %%% %\setsansfont{}
  %%% \setmonofont{Andale Mono}
\else
  \usepackage[T1]{fontenc}
  \usepackage[utf8]{inputenc}
  \usepackage{lmodern}
\fi
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{demo.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v1.0}{2016/04/16}{Initial version}
%
%
% \MakeShortVerb{|}
%
% \DoNotIndex{}
%
%
% \title{Eine Demo von ``Contao in \LaTeX{}''}
% \author{Andreas Fieger \\ \texttt{fiedsch@ja-eh.at}}
%
% \maketitle
% \tableofcontents
%
% \section{Abstract}
%
% Mit Hilfe von \LaTeX{} und \verb:docstrip: kann Code so verwaltet werden,
% daß die finalen Dateien erzeugt werden, die den Code enthalten und dazu
% eine schön formatierte Dokumentation erzeugt wird.
%
% Wie geht das? Siehe diese Datei -- read the source, Luke \texttt{;-)}
%
% \section{Demonstrationsbeispiel}
%
% Implementierung eines ContentElements für Contao.
%
%
% \StopEventually{\PrintChanges\PrintIndex}
%
% \section{Implementierung}
%
% Hier kommen die Details, die im Überblick des ersten Teils, der Z.\,B. das Benutzerhandbuch
% darstellen könnte nicht interessieren.
%
% \subsection{Dateiheader}
%
% Alle PHP-Dateien beginnen mit dem öffnenden PHP Tag und einem kurzen Copyrighthinweis.
%    \begin{macrocode}
%<*config,dca,element,lang,template>
<?php
  // (c) 2016 Andreas Fieger fiedsch@ja-eh.at

%</config,dca,element,lang,template>
%    \end{macrocode}
%
% Im Template wird dieser Kommentar auch sofort wieder geschlossen, da danach HTML-Code kommen soll.
%    \begin{macrocode}
%<*template>
?>
%</template>
%    \end{macrocode}
%
% \subsection{Konfiguration}
%
%    \begin{macrocode}
%<*config>
// Code für die config/config.php
%</config>
%    \end{macrocode}
%
% Hier fehlen noch die |autoload.ini| und die |autoload.php| die in gleicher Weise erstellt
% werden können.
% 
% \subsection{DataContainerArray -- DCA}
%
%    \begin{macrocode}
%<*dca>
// Code für die dca/tl_element.php
%</dca>
%    \end{macrocode}
%
%
%
% \subsection{PHP-Klasse für das ContentElement}
%
% \begin{environment}{DemoElement}
% Implementierung einer Beispielklasse und deren Dokumentation:
%
%    \begin{macrocode}
%<*element>
class DemoElement extends \ContentElement
{
%</element>
%    \end{macrocode}
%
%  \end{environment}
%
%
% \begin{macro}{generate()}
% In der Methode |generate| wird \dots.
%    \begin{macrocode}
%<*element>
  public function generate()
  {
     // do something here
  }
%</element>
%    \end{macrocode}
% \end{macro}
% \changes{v1.0}{2016/04/16}{Erste Version.}
%
% \begin{macro}{compile()}
% In der Methode |compile| wird \dots.
%    \begin{macrocode}
%<*element>
  public function compile()
  {
     // do something here
  }
%</element>
%    \end{macrocode}
% \end{macro}
%
% Ende der Klasse |DemoContent|.
%    \begin{macrocode}
%<*element>
}
%</element>
%    \end{macrocode}
%
%
% \subsection{Sprachdateien}
%
% In den Sprachdateien (hier die |tl_content.php| werden die Texte für jede (unterstützte) Sprache
% definiert.
%    \begin{macrocode}
%<*lang>
$GLOBALS['TL_LANG']['tl_content']['bar'] = array(
  'Bar',
  'Die Beschreibung von Bar.'
);
%</lang>
%    \end{macrocode}
%
% \subsection{Template}
%
%    \begin{macrocode}
%<*template>
<div>Code für die templates/ce_demo.html</div>
%</template>
%    \end{macrocode}
%
% \Finale
\endinput